import matplotlib.pyplot as plt
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_QuizzWindow(object):
    def setupUi(self, QuizzWindow):
        QuizzWindow.setObjectName("QuizzWindow")
        QuizzWindow.setFixedSize(1276, 796)
        QuizzWindow.setStyleSheet("background-color: #2e2d45;")
        self.quizzwidget = QtWidgets.QWidget(QuizzWindow)
        self.quizzwidget.setObjectName("quizzwidget")
        self.next_btn = QtWidgets.QPushButton(self.quizzwidget)
        self.next_btn.setGeometry(QtCore.QRect(860, 20, 111, 51))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.next_btn.sizePolicy().hasHeightForWidth())
        self.next_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.next_btn.setFont(font)
        self.next_btn.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #4bca64;\n"
            "border-radius: 25px;\n"
            "color: white"
        )
        self.next_btn.setObjectName("next_btn")
        self.next_btn.setText("Indiki")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.quizzwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(80, 640, 1121, 111))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.answer_btn_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.answer_btn_layout.setContentsMargins(0, 0, 0, 0)
        self.answer_btn_layout.setObjectName("answer_btn_layout")
        self.answer1 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer1.sizePolicy().hasHeightForWidth())
        self.answer1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.answer1.setFont(font)
        self.answer1.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #514bca;\n"
            "border-radius: 50px;\n"
            "color: white;\n"
            ""
        )
        self.answer1.setObjectName("answer1")
        self.answer_btn_layout.addWidget(self.answer1)
        self.answer2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer2.sizePolicy().hasHeightForWidth())
        self.answer2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.answer2.setFont(font)
        self.answer2.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #514bca;\n"
            "border-radius: 50px;\n"
            "color: white"
        )
        self.answer2.setObjectName("answer2")
        self.answer_btn_layout.addWidget(self.answer2)
        self.answer3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer3.sizePolicy().hasHeightForWidth())
        self.answer3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.answer3.setFont(font)
        self.answer3.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #514bca;\n"
            "border-radius: 50px;\n"
            "color: white;"
        )
        self.answer3.setObjectName("answer3")
        self.answer_btn_layout.addWidget(self.answer3)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.quizzwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(80, 80, 1121, 111))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.question_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.question_layout.setContentsMargins(0, 0, 0, 0)
        self.question_layout.setObjectName("question_layout")
        self.question = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.question.setFont(font)
        self.question.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #514bca;\n"
            "padding-left: 20px;\n"
            "border-radius: 50px;\n"
            "color: white"
        )
        self.question.setText("")
        self.question.setObjectName("question")
        self.question_layout.addWidget(self.question)
        self.quizz_id = QtWidgets.QLabel(self.quizzwidget)
        self.quizz_id.setGeometry(QtCore.QRect(580, 30, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.quizz_id.setFont(font)
        self.quizz_id.setStyleSheet("color: white;")
        self.quizz_id.setObjectName("quizz_id")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.quizzwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(79, 240, 1121, 371))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.answer_labels_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.answer_labels_layout.setContentsMargins(0, 0, 0, 0)
        self.answer_labels_layout.setObjectName("answer_labels_layout")
        self.answer_label1 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.answer_label1.setFont(font)
        self.answer_label1.setStyleSheet("color: white")
        self.answer_label1.setObjectName("answer_label1")
        self.answer_labels_layout.addWidget(self.answer_label1)
        self.answer_label2 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.answer_label2.setFont(font)
        self.answer_label2.setStyleSheet("color: white")
        self.answer_label2.setObjectName("answer_label2")
        self.answer_labels_layout.addWidget(self.answer_label2)
        self.answer_label3 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.answer_label3.setFont(font)
        self.answer_label3.setStyleSheet("color: white")
        self.answer_label3.setObjectName("answer_label3")
        self.answer_labels_layout.addWidget(self.answer_label3)
        self.restart_btn = QtWidgets.QPushButton(self.quizzwidget)
        self.restart_btn.setGeometry(QtCore.QRect(990, 20, 191, 51))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.restart_btn.sizePolicy().hasHeightForWidth())
        self.restart_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.restart_btn.setFont(font)
        self.restart_btn.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #ca4b4b;\n"
            "border-radius: 25px;\n"
            "color: white"
        )
        self.restart_btn.setObjectName("restart_btn")
        self.start_btn = QtWidgets.QPushButton(self.quizzwidget)
        self.start_btn.setGeometry(QtCore.QRect(480, 570, 341, 101))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.start_btn.setFont(font)
        self.start_btn.setText("Testa ba≈üla")
        self.start_btn.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #514bca;\n"
            "border-radius: 50px;\n"
            "color: white"
        )
        self.start_btn.setObjectName("start_btn")

        self.false_legend = QtWidgets.QFrame(self.quizzwidget)
        self.false_legend.setGeometry(QtCore.QRect(300, 510, 20, 20))
        self.false_legend.setStyleSheet(
            "background-color: #cb3f3f;\n"
            "border: 1px solid white;\n"
            "border-radius: 10px;"
        )
        self.false_legend.setObjectName("false_legend")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.false_legend)
        self.verticalLayout.setObjectName("verticalLayout")
        self.true_legend = QtWidgets.QFrame(self.quizzwidget)
        self.true_legend.setGeometry(QtCore.QRect(300, 550, 20, 20))
        self.true_legend.setStyleSheet(
            "background-color: #1da241;\n"
            "border: 1px solid white;\n"
            "border-radius: 10px;"
        )
        self.true_legend.setObjectName("true_legend")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.true_legend)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.false_legend_label = QtWidgets.QLabel(self.quizzwidget)
        self.false_legend_label.setGeometry(QtCore.QRect(340, 500, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.false_legend_label.setFont(font)
        self.false_legend_label.setStyleSheet("color: white;")
        self.false_legend_label.setObjectName("false_legend_label")
        self.true_legend_label = QtWidgets.QLabel(self.quizzwidget)
        self.true_legend_label.setGeometry(QtCore.QRect(340, 540, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.true_legend_label.setFont(font)
        self.true_legend_label.setStyleSheet("color: white;")
        self.true_legend_label.setObjectName("true_legend_label")
        self.results_layout = QtWidgets.QWidget(self.quizzwidget)
        self.results_layout.setGeometry(QtCore.QRect(660, 240, 341, 331))
        self.results_layout.setStyleSheet(
            "QLabel {\n" "    padding: 10px;\n" "    color: white;\n" "}"
        )
        self.results_layout.setObjectName("results_layout")
        self.result_widget = QtWidgets.QVBoxLayout(self.results_layout)
        self.result_widget.setContentsMargins(0, 0, 0, 0)
        self.result_widget.setObjectName("result_widget")
        self.false_answer_count = QtWidgets.QLabel(self.results_layout)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.false_answer_count.setFont(font)
        self.false_answer_count.setObjectName("false_answer_count")
        self.result_widget.addWidget(self.false_answer_count)
        self.true_answer_count = QtWidgets.QLabel(self.results_layout)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.true_answer_count.setFont(font)
        self.true_answer_count.setObjectName("true_answer_count")
        self.result_widget.addWidget(self.true_answer_count)
        self.percent = QtWidgets.QLabel(self.results_layout)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.percent.setFont(font)
        self.percent.setObjectName("percent")
        self.result_widget.addWidget(self.percent)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.quizzwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(230, 70, 421, 421))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.chart_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.chart_layout.setContentsMargins(0, 0, 0, 0)
        self.chart_layout.setObjectName("chart_layout")
        self.chart = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.chart.setObjectName("chart")
        self.chart_layout.addWidget(self.chart)
        QuizzWindow.setCentralWidget(self.quizzwidget)

        self.start_btn.clicked.connect(self.start_test)
        self.restart_btn.clicked.connect(self.restart_test)
        self.answer1.clicked.connect(self.tap_a)
        self.answer2.clicked.connect(self.tap_b)
        self.answer3.clicked.connect(self.tap_c)
        self.next_btn.clicked.connect(self.next_question)

        self.retranslateUi(QuizzWindow)
        QtCore.QMetaObject.connectSlotsByName(QuizzWindow)

        self.toggle_quizz_display(False)
        self.toggle_results(False)

        self.true_style = "background-color: #48475d; border: 2px solid #4bca64; border-radius: 50px; color: white"
        self.false_style = "background-color: #48475d; border: 2px solid #ca4b4b; border-radius: 50px; color: white"
        self.default_style = "background-color: #48475d; border: 2px solid #514bca; border-radius: 50px; color: white;"

        self.true_answers = 0

        self.quizz_data = {
            "questions": [
                {
                    "question": "Okatmagy≈à we bilim bermegi≈à nazary√Ωeti ha√Ωsy s√∂zde jemlen√Ω√§r?",
                    "variants": ("Metodika", "Pedagogika", "Dioletika"),
                    "true": "3",
                },
                {
                    "question": "Androgogika n√§hili pedagogikadyr?",
                    "variants": (
                        "Mekdebe √ßenli √Ωa≈üly √ßagalary≈à pedogogikasy",
                        "Uly √Ωa≈üly adamlary≈à pedagogikasy",
                        "√ùokary okuw ja√Ωlaryny≈à pedagogikasy",
                    ),
                    "true": "2",
                },
                {
                    "question": "Jena√Ωat endikleri √º√ßin azatlykdan mahrum edilen adamlary≈à saklan√Ωan,\nolary ga√Ωtadan terbi√Ωelemek bilen me≈ügullan√Ωan pedagogika ha√Ωsy?",
                    "variants": (
                        "D√ºzedi≈ü-z√§hmet pedagogikasy",
                        "Konfessional pedagogika",
                        "Sosial pedagogika",
                    ),
                    "true": "1",
                },
                {
                    "question": "Pedagogikany≈à metodologi√Ωasy ha√Ωsy wezipeleri(funksi√Ωalary) √Ωerine √Ωetir√Ω√§r?",
                    "variants": (
                        "Tankydy, akyl √Ωetirmek, refleksi√Ωa",
                        "Tankydy terbi√Ωe okatmak",
                        "Refleksi√Ωa, akyl √Ωetirmek, bilim-terbi√Ωe",
                    ),
                    "true": "1",
                },
                {
                    "question": "Bilim maksatnamasy ha√Ωsy ugurlara b√∂l√ºn√Ω√§r?",
                    "variants": (
                        "Umumy bilim, h√ºn√§r bilim",
                        "Umumy bilim, √Ωokary bilim",
                        "Umumy orta bilim, √Ωokary bilim",
                    ),
                    "true": "1",
                },
                {
                    "question": '√ùokary h√ºn√§r bilimi hakyndaky √§hli maksatlary T√ºrkmenistany≈à "Bilim"\nhakynda kanuny≈à rejelenen g√∂rn√º≈üini≈à ha√Ωsy maddasynda berilendir?',
                    "variants": (
                        "24-nji madda",
                        "28-nji madda",
                        "55-nji madda",
                    ),
                    "true": "2",
                },
                {
                    "question": "Indiwid kim?",
                    "variants": (
                        "√ñzba≈üdak pikirlenip bil√Ω√§n sosialla≈üan adamlar we akyl ta√Ωdan yza galanlar",
                        "≈ûahsy√Ωet we 18 √Ωa≈üa √ßenli √ßagalar",
                        "K√∂p√º≈à biri, 18 √Ωa≈üa √ßenli √ßagalar we akyl ta√Ωdan yza galanlar",
                    ),
                    "true": "3",
                },
                {
                    "question": "Adaptasi√Ωa n√§me?",
                    "variants": (
                        "Du√Ωgurlyk",
                        "U√Ωgunla≈ümak",
                        "√ñwreni≈ümek",
                    ),
                    "true": "2",
                },
                {
                    "question": "≈ûahsy√Ωeti≈à kemala gelmegine t√§sir ed√Ω√§n faktorlar ha√Ωsylar?",
                    "variants": (
                        "Terbi√Ωe, nesle ge√ßirijilik, sosial sreda",
                        "Terbi√Ωe, bilim, akyl-pa√Ωhas",
                        "Terbi√Ωe, biologik we fiziologik a√Ωratynlyklary",
                    ),
                    "true": "1",
                },
                {
                    "question": "≈ûahsy√Ωeti≈à kemala gelmegine t√§sir ed√Ω√§n formal d√§l sub√Ωektler ha√Ωsylar?",
                    "variants": (
                        "Gurnaklar, tany≈ülar, erkin gatna≈üyklar, sungat we medeni√Ωet edebi√Ωat",
                        "Sosial gatlaklar, alymlar, bilim ulgamy",
                        "Garynda≈ülar, ene-atalar, √Ωokary bilimli adamlar",
                    ),
                    "true": "1",
                },
                {
                    "question": "Prental √∂s√º≈ü n√§me?",
                    "variants": (
                        "Irki b√§beklik d√∂wri",
                        "En√§ni≈à g√∂ws√ºnd√§ki √∂s√º≈ü d√∂wri",
                        "Uly mekdep √Ωa≈üly √ßagalar",
                    ),
                    "true": "2",
                },
                {
                    "question": "≈ûahsy√Ωeti≈à esasan √º√ß sany faktory≈à nesle ge√ßirijiligini≈à sosial sredany≈à\nt√§lim terbi√Ω√§ni≈à t√§siri bilen kemala gel√Ω√§ndigini subut ed√Ω√§n alym kim?",
                    "variants": (
                        "Aristotel",
                        "Platon",
                        "L.P.Pawlow",
                    ),
                    "true": "3",
                },
                {
                    "question": "Aksellerasi√Ωa n√§me?",
                    "variants": (
                        "Adamy≈à beden √∂s√º≈üini≈à tizlenmegi",
                        "Adamy≈à akyl ta√Ωdan √∂s√º≈üini≈à tizlenmegi",
                        "Adamy≈à da≈ü-t√∂weregi bagly √∂s√º≈üini≈à tizlenmegi",
                    ),
                    "true": "1",
                },
                {
                    "question": '"Terbi√Ωe - bu √ßagalary≈à ululara a≈àsyz √∂√Ωkenmesidir?" di√Ωip ha√Ωsy alym bell√§pdir?',
                    "variants": (
                        "Monro",
                        "A.Diskweg",
                        "L.Tolsto√Ω",
                    ),
                    "true": "1",
                },
                {
                    "question": "Adamy≈à emosional lezzet aly≈ü du√Ωgysyny n√§hili terbi√Ωe k√§mille≈üdir√Ω√§r?",
                    "variants": (
                        "Ahlak terbi√Ωesi",
                        "G√∂zellik terbi√Ωesi",
                        "Z√§hmet terbi√Ωesi",
                    ),
                    "true": "2",
                },
                {
                    "question": '"Be√Ωik didaktika" kimi≈à i≈üi?',
                    "variants": (
                        "W.Ratke",
                        "√ùa.A.Komenski√Ω",
                        "A.S.Makarenko",
                    ),
                    "true": "2",
                },
                {
                    "question": "√áagany≈à ki√ßi mekdep √Ωa≈üly d√∂wri n√§√ße √Ωa≈üdan n√§√ße √Ωa≈üa √ßenli?",
                    "variants": (
                        "7 √Ωa≈üdan 12 √Ωa≈üa √ßenli",
                        "6 √Ωa≈üdan 11 √Ωa≈üa √ßenli",
                        "8 √Ωa≈üdan 11 √Ωa≈üa √ßenli",
                    ),
                    "true": "2",
                },
                {
                    "question": "Okatmagy≈à funksi√Ωalary ha√Ωsylar?",
                    "variants": (
                        "Okatmak, jemgy√Ωetde go≈ümak, sosialla≈üdyrmak",
                        "Okatmak, terbi√Ωe bermek √∂sd√ºrmek",
                        "Okatmak, ≈üahsy√Ωet edip √Ωeti≈üdirmek",
                    ),
                    "true": "2",
                },
                {
                    "question": "Okatmak i≈üi n√§me?",
                    "variants": (
                        "Bilim, ylym bermek",
                        "Dersler bilen tany≈üdyrmak",
                        "Mugallym bilen okuw√ßyny≈à aragatna≈üygy",
                    ),
                    "true": "3",
                },
                {
                    "question": "Indiwid di√Ωen d√º≈ü√ºnje n√§m√§ni a≈àlad√Ωar?",
                    "variants": (
                        "H√§zirki zaman √∂sen adamzat jemgy√Ωetini emele getiren umumylyklygyny a≈àlad√Ωar",
                        "√ñz√º≈àe der≈àem√§ge, √∂z√º≈ài bahalamaga, √∂z√º≈àe g√∂zeg√ßilik etm√§ge ukyby≈à bolmagy",
                        "Kimdir birini≈à g√∂zeg√ßiligine m√§t√§√ß adamlar",
                    ),
                    "true": "3",
                },
                # continue
                {
                    "question": "T√ºrkmenistany≈à Magtymguly adyndaky √ùa≈ülar guramasy ha√ßan d√∂redildi?",
                    "variants": (
                        "1994-nji √Ωyly≈à 15-nji okt√Ωabry",
                        "1994-nji √Ωyly≈à 15-nji no√Ωabry",
                        "1991-nji √Ωyly≈à 16-njy no√Ωabry",
                    ),
                    "true": "1",
                },
                {
                    "question": "Iholastika di√Ωmek n√§me?",
                    "variants": (
                        "Alym-mekdep",
                        "Dini mekdep",
                        "√ùokary okuw",
                    ),
                    "true": "1",
                },
                {
                    "question": '"Bilim hakynda" T√ºrkmenistany≈à kanunyny≈à rejelenen g√∂rn√º≈üi\nn√§√ße maddadan dur√Ωar?',
                    "variants": (
                        "60",
                        "12",
                        "62",
                    ),
                    "true": "1",
                },
                {
                    "question": "Diskusi√Ωa g√∂rn√º≈üi okatmagy≈à ha√Ωsy usulyna degi≈üli?",
                    "variants": (
                        "Amaly usuly",
                        "G√∂rkezme usuly",
                        "S√∂z √ºsti usuly",
                    ),
                    "true": "1",
                },
                {
                    "question": "Pedagogiki gara√Ωy≈ülarwe pikirler √Ωazuwy≈à d√∂remeginden √∂≈à n√§melerde\n√Ω√ºze √ßykypdyr?",
                    "variants": (
                        "A√Ωdymlarda, yrymlarda, √Ωadyg√§rliklerde",
                        "Nakyllarda, yrymlarda, meklerde",
                        "Mukaddes kitaplarda, rowa√Ωatlarda, d√§p=dessurlarda, yrymlarda",
                    ),
                    "true": "1",
                },
                {
                    "question": "√áagany≈à √∂s√º≈üinde √Ωa≈ü a√Ωratynlyklaryna b√∂lmekde psihologik √∂s√º≈ü\nha√Ωsy √Ωagda√Ωlary √∂z i√ßine al√Ωar?",
                    "variants": (
                        "√úns√º≈à, pikirlenm√§ni≈à we s√∂zle√Ω≈üi≈à, temperamenti≈à we gylyk-h√§si√Ωeti≈à\n    a√Ωratynlyklary degi≈ülidir",
                        "Gan-a√Ωlany≈ü, i√ßki m√§zleri≈à, nerw sistemasyny≈à we ≈ü.m. degi≈ülidir",
                        "Hy√Ωala getirmeleri≈à, sy√Ωasy, ahlak gara√Ωy≈ülaryny≈à nerw sistemasyny\n    we ≈ü.m degi≈ülidir",
                    ),
                    "true": "1",
                },
                {
                    "question": "Pedagog s√∂zi ilkiba≈üda n√§hili d√º≈ü√ºnjede ulanylypdyr?",
                    "variants": (
                        "Gadymy Gresi√Ωada √∂z e√Ωesini≈à √ßagasyny≈à mekdebe √§kidip getir√Ω√§n\n    gula √Ω√ºzlenipdirler",
                        "Afiny mekdeplerinde bilim ber√Ω√§n mugallymlara √Ω√ºzlenipdirler",
                        "Halypa",
                    ),
                    "true": "1",
                },
                {
                    "question": "Bilim bermekde d√ºrli dersleri bilen baglany≈üykda √∂wrenmekligi ha√Ωsy\nG√ºndogar akyldary maslahat beripdir?",
                    "variants": (
                        "Al Horezmi",
                        "Al Faraby",
                        "Al Biruny",
                    ),
                    "true": "1",
                },
                {
                    "question": "Didaktika s√∂z√ºni ilkinji gezek ylmy dolany≈üyga girizen alym kim?",
                    "variants": (
                        "Frensis Bekon",
                        "Aristotel",
                        "√ùan Amos Komenski√Ω",
                    ),
                    "true": "1",
                },
                {
                    "question": "Bilimleri, ba≈üarnyklary, endikleri √∂zle≈üdirmek hem-de emele getirmek\nmaksady bilen √Ω√∂rite gurnal√Ωan mugallymlary≈à we okuw√ßylary≈à aragatna≈üygyna\nn√§me di√Ωil√Ω√§r?",
                    "variants": (
                        "Okatmak",
                        "Sosialla≈ümak",
                        "Terbi√Ωelemek",
                    ),
                    "true": "1",
                },
                {
                    "question": "Belli bir endigi, bilimi, ba≈üarnygy √Ωa-da okuw √∂wretmek we √∂zle≈üdirmek\n√º√ßin √Ω√∂rite gurnal√Ωan sapaklary≈à gidi≈üine n√§me di√Ωil√Ω√§r?",
                    "variants": (
                        "Gurama√ßylyk",
                        "Okuw prosesi",
                        "Pedagogik i≈ü",
                    ),
                    "true": "1",
                },
                {
                    "question": "Okatmagy≈à maksadyna we wezipelerine n√§me di√Ωil√Ω√§r?",
                    "variants": (
                        "Forma",
                        "Metod",
                        "Seri≈üde",
                    ),
                    "true": "1",
                },
                {
                    "question": "Okatmak d√∂wr√ºni≈à kanunala√Ωyklygy netijesinde okuw√ßylara h√§zirki d√∂wr√º≈à\ntalabyna la√Ωyk bilim we terbi√Ωe kanun maksady bilen ulanyl√Ωan esasy\nba≈ü d√ºzg√ºnlere n√§me di√Ωil√Ω√§r?",
                    "variants": (
                        "Bilim bermek",
                        "Okatmagy≈à esaslary",
                        "Okatmagy≈à d√ºzg√ºnleri",
                    ),
                    "true": "1",
                },{
                    "question": "Mugallymy≈à okuw√ßylara maglumatlary bermek, terbi√Ωelemek, a≈àlaatmak we\ndurmu≈üda ulanmagy≈à maksadyny d√º≈ü√ºndirmek bo√Ωun√ßa tertiplenen i≈üe n√§me\ndi√Ωil√Ω√§r?",
                    "variants": (
                        "Okatmak",
                        "Okamak",
                        "Didaktika",
                    ),
                    "true": "1",
                },
            ]
        }

    def refresh_next_btn(self, inner_text: str, func_for_connection):
        self.next_btn = QtWidgets.QPushButton(self.quizzwidget)
        self.next_btn.setGeometry(QtCore.QRect(790, 20, 190, 51))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.next_btn.sizePolicy().hasHeightForWidth())
        self.next_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.next_btn.setFont(font)
        self.next_btn.setStyleSheet(
            "background-color: #48475d;\n"
            "border: 2px solid #4bca64;\n"
            "border-radius: 25px;\n"
            "color: white"
        )

        self.next_btn.setObjectName("next_btn")
        self.next_btn.setText(inner_text)
        self.next_btn.clicked.connect(func_for_connection)

    def toggle_results(self, on: bool) -> None:
        if on:
            self.false_legend.setVisible(True)
            self.false_legend_label.setVisible(True)
            self.true_legend.setVisible(True)
            self.true_legend_label.setVisible(True)
            self.results_layout.setVisible(True)
            self.false_answer_count.setVisible(True)
            self.true_answer_count.setVisible(True)
            self.percent.setVisible(True)
            self.verticalLayoutWidget.setVisible(True)

        else:
            self.false_legend.setVisible(False)
            self.false_legend_label.setVisible(False)
            self.true_legend.setVisible(False)
            self.true_legend_label.setVisible(False)
            self.results_layout.setVisible(False)
            self.false_answer_count.setVisible(False)
            self.true_answer_count.setVisible(False)
            self.percent.setVisible(False)
            self.verticalLayoutWidget.setVisible(False)

    def finish_quizz(self):
        self.toggle_quizz_display(False)
        self.toggle_results(True)
        self.false_legend_label.setText("-  √ùal≈ày≈ü")
        self.true_legend_label.setText("-  Dogry")
    
        false_answers = len(self.quizz_data["questions"]) + - self.true_answers
        data = [false_answers, self.true_answers]
        plt.pie(data, startangle=90, colors=["#cb3f3f", "#1da241"])
        plt.savefig("chart.png", transparent=True)
        pixmap = QtGui.QPixmap("chart.png").scaled(421, 421, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
        self.chart.setPixmap(pixmap)

        self.false_answer_count.setText(f"Dogry jogaplar: {self.true_answers}")
        self.true_answer_count.setText(f"√ùal≈ày≈ü jogaplar: {false_answers}")
        self.percent.setText(f"√ùeti≈üik: {(self.true_answers / len(self.quizz_data["questions"])) * 100}%")

    def next_question(self):
        self.id += 1
        self.quizz_id.setText(f"Sorag ‚Ññ{self.id + 1}")
        self.question.setText(self.quizz_data["questions"][self.id]["question"])
        self.answer_label1.setText(
            "a) " + self.quizz_data["questions"][self.id]["variants"][0]
        )
        self.answer_label2.setText(
            "b) " + self.quizz_data["questions"][self.id]["variants"][1]
        )
        self.answer_label3.setText(
            "√ß) " + self.quizz_data["questions"][self.id]["variants"][2]
        )
        self.next_btn.setVisible(False)

        self.set_btns_border_color(status="refresh")

        if self.id == len(self.quizz_data["questions"]) - 1:
            self.refresh_next_btn("Netijeleri g√∂rmek", self.finish_quizz)

    def set_btns_border_color(self, status=None):
        if status == "refresh":
            self.answer1.setStyleSheet(self.default_style)
            self.answer2.setStyleSheet(self.default_style)
            self.answer3.setStyleSheet(self.default_style)
        else:
            (
                self.answer1.setStyleSheet(self.true_style)
                if self.quizz_data["questions"][self.id]["true"] == "1"
                else self.answer1.setStyleSheet(self.false_style)
            )
            (
                self.answer2.setStyleSheet(self.true_style)
                if self.quizz_data["questions"][self.id]["true"] == "2"
                else self.answer2.setStyleSheet(self.false_style)
            )
            (
                self.answer3.setStyleSheet(self.true_style)
                if self.quizz_data["questions"][self.id]["true"] == "3"
                else self.answer3.setStyleSheet(self.false_style)
            )

    def tap_a(self):
        self.next_btn.setVisible(True)
        self.set_btns_border_color()

        if self.quizz_data["questions"][self.id]["true"] == "1":
            self.true_answers += 1

    def tap_b(self):
        self.next_btn.setVisible(True)
        self.set_btns_border_color()

        if self.quizz_data["questions"][self.id]["true"] == "2":
            self.true_answers += 1

    def tap_c(self):
        self.next_btn.setVisible(True)
        self.set_btns_border_color()

        if self.quizz_data["questions"][self.id]["true"] == "3":
            self.true_answers += 1

    def restart_test(self):
        self.toggle_quizz_display(False)
        self.start_btn.setVisible(True)
        self.true_answers = 0
        self.set_btns_border_color(status="refresh")
        self.toggle_results(False)

    def start_test(self):
        self.toggle_quizz_display(True)
        self.start_btn.setVisible(False)
        self.id = 0
        self.quizz_id.setText(f"Sorag ‚Ññ{self.id + 1}")
        self.question.setText(self.quizz_data["questions"][self.id]["question"])
        self.answer_label1.setText(
            "a) " + self.quizz_data["questions"][self.id]["variants"][0]
        )
        self.answer_label2.setText(
            "b) " + self.quizz_data["questions"][self.id]["variants"][1]
        )
        self.answer_label3.setText(
            "√ß) " + self.quizz_data["questions"][self.id]["variants"][2]
        )

    def toggle_quizz_display(self, on: bool) -> None:
        if on:
            self.answer_label1.setVisible(True)
            self.answer_label2.setVisible(True)
            self.answer_label3.setVisible(True)
            self.answer1.setVisible(True)
            self.answer2.setVisible(True)
            self.answer3.setVisible(True)
            self.restart_btn.setVisible(True)
            self.question.setVisible(True)
            self.quizz_id.setVisible(True)
        else:
            self.answer_label1.setVisible(False)
            self.answer_label2.setVisible(False)
            self.answer_label3.setVisible(False)
            self.answer1.setVisible(False)
            self.answer2.setVisible(False)
            self.answer3.setVisible(False)
            self.restart_btn.setVisible(False)
            self.question.setVisible(False)
            self.quizz_id.setVisible(False)
            self.next_btn.setVisible(False)

    def retranslateUi(self, QuizzWindow):
        _translate = QtCore.QCoreApplication.translate
        QuizzWindow.setWindowTitle(_translate("QuizzWindow", "MainWindow"))
        self.answer1.setText(_translate("QuizzWindow", "a"))
        self.answer2.setText(_translate("QuizzWindow", "b"))
        self.answer3.setText(_translate("QuizzWindow", "√ß"))
        self.quizz_id.setText(_translate("QuizzWindow", "Sorag ‚Ññ"))
        self.answer_label1.setText(_translate("QuizzWindow", "a)"))
        self.answer_label2.setText(_translate("QuizzWindow", "b)"))
        self.answer_label3.setText(_translate("QuizzWindow", "√ß)"))
        self.restart_btn.setText(_translate("QuizzWindow", "T√§zeden ba≈ülat"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    QuizzWindow = QtWidgets.QMainWindow()
    ui = Ui_QuizzWindow()
    ui.setupUi(QuizzWindow)
    QuizzWindow.show()
    sys.exit(app.exec_())
